#include <GL/glut.h>  
#include<math.h> 
#include<stdlib.h>
#include<iostream>
#include<stdio.h>

using namespace std;

 int ww=1360,wh=760;  
  int first=0;  
  int xi,yi,xf,yf,xx,yy;  

 int sign(float arg)
{
if(arg<0)
return -1;
else if(arg==0)
return 0;
else
return 1;
}

void Bre(int X1,int Y1,int X2,int Y2)
{
  float dx=abs(X2-X1);
  float dy=abs(Y2-Y1);
  int s1,s2,exc,y,x,i;
float g,temp;
x=X1;
y=Y1;
	s1=sign(X2-X1);
	s2=sign(Y2-Y1);	
	
	glBegin(GL_POINTS);	 
	
	if(dy>dx)
	{
	temp=dx;
	dx=dy;
	dy=temp;
	exc=1;
	}
	else
	{
	exc=0;	
	} 	
	g=2*dy-dx;
	i=1;
	while(i<=dx)
	{	
		glVertex2d(x,y);
		while(g>=0)
		{
			if(exc==1)
			x=x+s1;
			else
			y=y+s2;
			g=g-2*dx;
		}
		if(exc==1)
		y=y+s2;
		else
		x=x+s1;
	g=g+2*dy;
	i++;
	}
 	 glEnd();
	glFlush();
}

void symmetry(double xc,double yc,double x,double y)
{
  glBegin(GL_POINTS);s
  glVertex2i(xc+x, yc+y);
  glVertex2i(xc+x, yc-y);
  glVertex2i(xc+y, yc+x);
  glVertex2i(xc+y, yc-x);
  glVertex2i(xc-x, yc-y);
  glVertex2i(xc-y, yc-x);
  glVertex2i(xc-x, yc+y);
  glVertex2i(xc-y, yc+x);
  glEnd();
}


void circle(double x1,double y1,double r)
{
  int x=0,y=r;
  float pk=(5.0/4.0)-r;

  /* Plot the points */
  /* Plot the first point */
  symmetry(x1,y1,x,y);
  int k;
  /* Find all vertices till x=y */
  while(x < y)
  {
    x = x + 1;
    if(pk < 0)
      pk = pk + 2*x+1;
    else
    {
      y = y - 1;
      pk = pk + 2*(x - y) + 1;
    }
    symmetry(x1,y1,x,y);
  }
  glFlush();

}


  void display()  
  {  
       glClearColor(1.0,1.0,1.0,0);	       glColor3f(0.0,0.0,0.0); 
	glViewport(0 , 0 , 1360 , 760);
  	glLoadIdentity(); 
  	gluOrtho2D(0 , 1360 , 0 , 760);
        glClear(GL_COLOR_BUFFER_BIT);  
	glMatrixMode(GL_PROJECTION);
  	glFlush();  	
}

void incircle()
{
double a,b,c,p,rx,ry,area,radius;

a=pow((pow((xf-xi),2)+pow((yf-yi),2)),0.5);
b=pow((pow((xf-xx),2)+pow((yf-yy),2)),0.5);
c=pow((pow((xx-xi),2)+pow((yy-yi),2)),0.5);
p=a+b+c;

rx=(a*xx+b*xi+c*xf)/p;
ry=(a*yy+b*yi+c*yf)/p;

area=(xx*(yi-yf)+xi*(yf-yy)+xf*(yy-yi))/2;
area=abs(area);
p=p/2;
radius=area/p;
circle(rx,ry,radius);
}

void circum()
{
float s1,s2,mx,my,mz,mw,rx,ry,area,a,b,c,radius;
a=pow((pow((xf-xi),2)+pow((yf-yi),2)),0.5);
b=pow((pow((xf-xx),2)+pow((yf-yy),2)),0.5);
c=pow((pow((xx-xi),2)+pow((yy-yi),2)),0.5);

rx=((yy-yf)*(xi*xi+yi*yi)+(yi-yy)*(xf*xf+yf*yf)+(yf-yi)*(xx*xx+yy*yy))/(2*(yi*(xf-xx)+yf*(xx-xi)+yy*(xi-xf)));
ry=((xx-xf)*(yi*yi+xi*xi)+(xi-xx)*(xf*xf+yf*yf)+(xf-xi)*(xx*xx+yy*yy))/(2*(xi*(yf-yy)+xf*(yy-yi)+xx*(yi-yf)));

area=(xx*(yi-yf)+xi*(yf-yy)+xf*(yy-yi))/2;
area=abs(area);
radius=(a*b*c)/(4*area);
circle(rx,ry,radius);
printf("X Cordinate:%f and y cordinate:%f",rx,ry);
cout<<"\n"<<xi;
cout<<"\n"<<yi;
cout<<"\n"<<xf;
cout<<"\n"<<yf;
cout<<"\n"<<xx;
cout<<"\n"<<yy;


}
  
  void mouse(int btn,int state,int x,int y)  
  {  
       if(btn==GLUT_LEFT_BUTTON && state==GLUT_DOWN)  
       {  
            switch(first)  
            {  
            case 0:  
                 xi=x;  
                 yi=wh-y;  
                 first=1;  
                 break;  
            case 1:  
                 xf=x;  
                 yf=wh-y;  
                 first=2;  
                 break;  
  	    case 2:  
                 xx=x;  
                 yy=wh-y;  
		 Bre(xi,yi,xf,yf);
	         Bre(xf,yf,xx,yy);
                 Bre(xx,yy,xi,yi);
		incircle();
		 circum();
                 first=0;  
                 break;  
          
            }  
       }  
  }  
 int main(int argc,char** argv)  
  {  
       glutInit(&argc,argv);  
       glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);  
       glutInitWindowSize(ww,wh);  
       glutCreateWindow("Draw Triangle With Mouse Click");  
       glutDisplayFunc(display);  
       glutMouseFunc(mouse);  
       glutMainLoop();  
       return 0;  
  }  
